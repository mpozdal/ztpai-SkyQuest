'use client';
import { useRef, useCallback } from 'react';
import omit from 'lodash/omit';
import { useControlled } from '../../utils';
export default function useFormError(formError) {
  var _useControlled = useControlled(formError, {}),
    realFormError = _useControlled[0],
    setFormError = _useControlled[1];
  var realFormErrorRef = useRef(realFormError);
  realFormErrorRef.current = realFormError;
  var onRemoveError = useCallback(function (name) {
    /**
     * when this function is called when the children component is unmount,
     * it's an old render frame so use Ref to get future error
     */
    var formError = omit(realFormErrorRef.current, [name]);
    realFormErrorRef.current = formError;
    setFormError(formError);
    return formError;
  }, [setFormError]);
  return {
    formError: realFormError,
    setFormError: setFormError,
    onRemoveError: onRemoveError
  };
}